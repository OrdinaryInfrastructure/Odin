name: Publish to Nuget

on: workflow_dispatch

env:
  SOLUTION: './Source/Odin.sln'
  BUILD_CONFIGURATION: Release
  PACKAGE_DIR: Packaging
  NUGET_SOURCE: https://api.nuget.org/v3/index.json
  REPO_OWNER: OrdinaryInfrastructure
  REPO: Odin

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Configure git
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.x.x
        
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0
      with:
        versionSpec: '5.x'
        
    - name: Update Project Versions
      uses: gittools/actions/gitversion/execute@v0
      id: gitversion
      with:
        useConfigFile: true
        additionalArguments: '/updateprojectfiles'
    
    - name: Package for Nuget
      run: |
        dotnet pack ./Source/Odin.BackgroundProcessing.Abstractions/Odin.BackgroundProcessing.Abstractions.csproj --configuration $CONFIGURATION --output $PACKAGE_DIR
        dotnet pack ./Source/Odin.BackgroundProcessing.Hangfire/Odin.BackgroundProcessing.Hangfire.csproj --configuration $CONFIGURATION --output $PACKAGE_DIR
        dotnet pack ./Source/Odin.BackgroundProcessing/Odin.BackgroundProcessing.csproj --configuration $CONFIGURATION --output $PACKAGE_DIR
        dotnet pack ./Source/Odin.Common/Odin.Common.csproj --configuration $CONFIGURATION --output $PACKAGE_DIR
        dotnet pack ./Source/Odin.Cryptography/Odin.Cryptography.csproj --configuration $CONFIGURATION --output $PACKAGE_DIR
        dotnet pack ./Source/Odin.Data.SqlScriptsRunner/Odin.Data.SqlScriptsRunner.csproj --configuration $CONFIGURATION --output $PACKAGE_DIR
        dotnet pack ./Source/Odin.Email.Mailgun/Odin.Email.Mailgun.csproj --configuration $CONFIGURATION --output $PACKAGE_DIR
        dotnet pack ./Source/Odin.Email/Odin.Email.csproj --configuration $CONFIGURATION --output $PACKAGE_DIR
        dotnet pack ./Source/Odin.Messaging/Odin.Messaging.csproj --configuration $CONFIGURATION --output $PACKAGE_DIR
        dotnet pack ./Source/Odin.Notifications/Odin.Notifications.csproj --configuration $CONFIGURATION --output $PACKAGE_DIR
        dotnet pack ./Source/Odin.RemoteFiles.Abstractions/Odin.RemoteFiles.Abstractions.csproj --configuration $CONFIGURATION --output $PACKAGE_DIR
        dotnet pack ./Source/Odin.RemoteFiles.SFTP/Odin.RemoteFiles.SFTP.csproj --configuration $CONFIGURATION --output $PACKAGE_DIR
        dotnet pack ./Source/Odin.RemoteFiles/Odin.RemoteFiles.csproj --configuration $CONFIGURATION --output $PACKAGE_DIR
      env:
        CONFIGURATION: ${{env.BUILD_CONFIGURATION}}
        PACKAGE_DIR: ${{env.PACKAGE_DIR}}
        
    - name: Publish to Nuget
      run: |
        dotnet nuget push $PACKAGE_DIR/Odin.BackgroundProcessing.*.nupkg --api-key $API_KEY --source $NUGET_SOURCE
        dotnet nuget push $PACKAGE_DIR/Odin.Common.*.nupkg --api-key $API_KEY --source $NUGET_SOURCE
        dotnet nuget push $PACKAGE_DIR/Odin.Cryptography.*.nupkg --api-key $API_KEY --source $NUGET_SOURCE
        dotnet nuget push $PACKAGE_DIR/Odin.Data.SqlScriptsRunner.*.nupkg --api-key $API_KEY --source $NUGET_SOURCE
        dotnet nuget push $PACKAGE_DIR/Odin.Email.*.nupkg --api-key $API_KEY --source $NUGET_SOURCE
        dotnet nuget push $PACKAGE_DIR/Odin.Messaging.*.nupkg --api-key $API_KEY --source $NUGET_SOURCE
        dotnet nuget push $PACKAGE_DIR/Odin.Notifications.*.nupkg --api-key $API_KEY --source $NUGET_SOURCE
        dotnet nuget push $PACKAGE_DIR/Odin.RemoteFiles.*.nupkg --api-key $API_KEY --source $NUGET_SOURCE
      env:
        API_KEY: ${{ secrets.NUGET_API_KEY }}
        NUGET_SOURCE: ${{ env.NUGET_SOURCE }}
        PACKAGE_DIR: ${{ env.PACKAGE_DIR }}
        
    - name: Commit Version Update and Tag Repo
      id: update-version-and-tag
      run: |
        git add '*.csproj'
        git commit -m 'Publish'
        git tag -a $RELEASE_TAG -m "Version $RELEASE_TAG"
        git push
        git push origin $RELEASE_TAG
        echo "releaseTag=$RELEASE_TAG" >> "$GITHUB_OUTPUT"
      env:
        RELEASE_TAG: v${{ steps.gitversion.outputs.fullSemVer }}

    - name: Create GitHub Release
      run: |
        if [[ "$BRANCH_NAME" == "master" ]]; then
          IS_PRERELEASE=false
        else
          IS_PRERELEASE=true
        fi
        echo "Release tag: $RELEASE_TAG"
        echo "Owner: $OWNER"
        echo "Repo: $REPO"
        echo "Branch: $BRANCH_NAME"
        echo "Is prerelease: $IS_PRERELEASE" 
        gh api \
        --method POST \
        -H "Accept: application/vnd.github+json" \
        -H "X-GitHub-Api-Version: 2022-11-28" \
        /repos/$OWNER/$REPO/releases \
        -f tag_name="$RELEASE_TAG" \
        -f name="$RELEASE_TAG" \
        -f body="Publish of $RELEASE_TAG" \
        -F draft=false \
        -F prerelease=$IS_PRERELEASE \
        -F generate_release_notes=true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        RELEASE_TAG: ${{ steps.update-version-and-tag.outputs.releaseTag }}
        BRANCH_NAME: ${{ steps.gitversion.outputs.branchName }}
        OWNER: ${{ env.REPO_OWNER }}
        REPO: ${{ env.REPO }}
    